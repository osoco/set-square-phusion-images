@include("preamble")
FROM phusion/baseimage:${PARENT_IMAGE_TAG}
@include("maintainer")

# Basic stuff. Sets sh to bash, required by addon-toggles
@include("common")
@include("dry-wit")

@include("addon-toggles")

# Housekeeping
@include("install")
# @include("syslog")
# @include("rsyslog")
@include("volumes")
@include("help")
@include("locale")
# @include("create_ssl_certificate")
@include("backup")
@include("check-version")

# Extra services
@include("cron")
# @include("exim")
# @include("monit")
# @include("rsnapshot")
# @include("ssh")
@include("tripwire")

ENV DW_DISABLE_ANSI_COLORS=${DISABLE_ANSI_COLORS}

ENTRYPOINT ["/sbin/my_exec"]
CMD ["/sbin/my_init"]

@include("copy-metadata")
@include("symlinks")
@include("instructions")

# * DOCKERFILES
#
# Children must provide:
# - /README: to describe the image.
# - /LICENSE: rights and restrictions on how to use, inspect, modify and distribute this image.
# - /Dockerfiles/copyright-preamble.txt: A short summary of the license. It's included, as well
#   as the README, when displaying the help to the user.
# - ${DOLLAR}{SERVICE_VERSION}: The service version information.
# - ${DOLLAR}{SERVICE_USER}: The user under which the service runs.

# Children should provide:
# - service: to run the process (letting runit handling forking it).
# - monit.conf: how to monitor the process (or disable monit via declaring ENABLE_MONIT=false).
# - check-version-${DOLLAR}{IMAGE}: A script to retrieve the information about the latest version of the service.
# - ${DOLLAR}{SERVICE}: The name of the service (matches a folder under /etc/service/).
# - ${DOLLAR}{SERVICE_GROUP}: The group of the user under which the service runs. Defaults to ${DOLLAR}{SERVICE_USER}.
# - ${DOLLAR}{SERVICE_PACKAGE}: The package name, if the service is installed through the package manager.
#
# And then add steps in their Dockerfile such as the following:
# COPY README /README
# RUN mkdir /etc/service/${IMAGE} && cp -r /etc/service/.template/* /etc/service/${IMAGE}
# COPY service /etc/service/${IMAGE}/run
# RUN chmod +x /etc/service/${IMAGE}/run
# COPY monit.conf /etc/monit/monitrc.d/${DOLLAR}{IMAGE}.conf
# COPY backup.sh /usr/local/bin/backup-${DOLLAR}{NAMESPACE}-${DOLLAR}{IMAGE}_${DOLLAR}{TAG}.sh
# COPY check-version.sh /usr/local/bin/check-version.sh-${DOLLAR}{SERVICE}
# RUN chmod +x /usr/local/bin/*
#
# If the process is itself a daemon which cannot be run in foreground,
# then provide a LSB-like script and call it from within /etc/rc.local:
# COPY service /etc/rc.local
# RUN chmod +x /etc/rc.local
#
# Before finishing the Dockerfile, please RUN ${DOLLAR}{SYSTEM_CLEANUP} if the
# image installs packages via ${DOLLAR}{PKG_INSTALL}. You'd need to run ${DOLLAR}{SYSTEM_UPDATE} first.
#
# Additionaly, every Dockerfile should add its own Dockerfile to the /Dockerfiles
# folder:
# COPY Dockerfile /Dockerfiles/${DOLLAR}{NAMESPACE}-${DOLLAR}{IMAGE}.${DOLLAR}{TAG}
#
# And last, adding comments on how to run the image is very helpful.
#
# * BACKUPS
#
# If ENABLE_RSNAPSHOT is activated at build time, then the resulting image will
# trigger a built-in rsnapshot-based backup mechanism.
# Such mechanism analyzes all VOLUMEs in all Dockerfiles (the image's, and its ancestors).
# For all volumes under /backup folder, rsnapshot will take care of their backup.
# Additionally, if the Dockerfile stores scripts starting by "backup-"
# in /usr/local/bin, rsnapshot will invoke them passing the volume folder as argument.
#
# Once the cron daemon triggers awakes the rsnapshot process, it will run any backup
# scripts. Afterwards, cron will transfer the contents of the backup volumes to a remote
# server (${IMAGE}${BACKUP_HOST_PREFIX}), using the "backup" user.
# To authenticate, it will use the very same ssh key generated when building
# this image.
#
# Therefore, the expected way to set a remotely-hosted backup, is:
# 1) Run this image in a remote host that will store the backups:
#    > docker run -d --name ${IMAGE}-backup --hostname ${IMAGE}-backup \
#             (-v [host-path]:[volume])+ \
#             -p ${BACKUP_HOST_SSH_PORT}:22 ${{NAMESPACE}/backup backup
# 2) Launch container(s) normally (as described in their README).
