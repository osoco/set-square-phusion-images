#!/bin/bash dry-wit
# mod: bootstrap.sh
# api: public
# txt: Bootstraps a local RabbitMQ server.

DW.import rabbitmq-bootstrap;

# fun: main
# api: public
# txt: Bootstraps Contestia exchanges and queues in a local RabbitMQ server.
# txt: Returns 0/TRUE always, but can exit in case of error.
# use: main
function main() {
  rabbitmqMigrate;
}

# fun: declare_virtual_hosts
# api: public
# txt: Declares the virtual hosts.
# txt: Returns 0/TRUE if the virtual host gets created successfully; 1/FALSE otherwise.
# use: if declare_virtual_hosts; then
# use:   echo "Virtual hosts declared successfully";
# use: fi
function declare_virtual_hosts() {
  local -i _rescode=${TRUE};

  #  add_vhost /;

  return ${_rescode};
}

# fun: declare_alternate_exchanges
# api: public
# txt: Declares the alternate exchanges.
# txt: Returns 0/TRUE if the alternate exchanges get created successfully; 1/FALSE otherwise.
# use: if declare_alternate_exchanges; then
# use:   echo "Alternate exchanges created successfully";
# use: fi
function declare_alternate_exchanges() {
  local -i _rescode=${TRUE};

#  declare_exchange myexchange-alt fanout;

  return ${_rescode};
}

# fun: enable_changesets
# api: public
# txt: Enables the processing of changesets.
# txt: Returns 0/TRUE always.
# use: enable_changesets;
function enable_changesets() {

  cat <<EOF > /etc/cron.d/rabbitmq-changesets
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/src/dry-wit/src
RABBITMQ_NODENAME=${RABBITMQ_NODENAME}
NO_COLOR=true
USECOLOR=no

*/${CHANGESET_MONITORING_INTERVAL} * * * * root /usr/local/sbin/pending_rabbitmq_scripts.sh -v &> /var/log/rabbitmq/changesets.log
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
EOF

  if   ! fileExists /usr/local/sbin/pending_rabbitmq_scripts.inc.sh \
    || ! fileContains /usr/local/sbin/pending_rabbitmq_scripts.inc.sh "defineEnvVar ADMIN_USER_NAME"; then
    cat <<EOF >> /usr/local/sbin/pending_rabbitmq_scripts.inc.sh
# env: ADMIN_USER_NAME: The name of the admin user.
defineEnvVar ADMIN_USER_NAME MANDATORY "The name of the admin user" "${ADMIN_USER_NAME}";
EOF
  fi

  if   ! fileExists /usr/local/sbin/pending_rabbitmq_scripts.inc.sh \
    || ! fileContains /usr/local/sbin/pending_rabbitmq_scripts.inc.sh "defineEnvVar ADMIN_USER_PASSWORD"; then
    cat <<EOF >> /usr/local/sbin/pending_rabbitmq_scripts.inc.sh
# env: ADMIN_USER_PASSWORD: The password of the admin user.
defineEnvVar ADMIN_USER_PASSWORD MANDATORY "The password of the admin user" "${ADMIN_USER_PASSWORD}";
EOF
  fi
}

# Script metadata
setScriptDescription "Bootstraps a local RabbitMQ server.";

# env: LOCK_FILE: The file indicating if the bootstrap is running.
defineEnvVar LOCK_FILE MANDATORY "The file indicating if the bootstrap is running" "/backup/rabbitmq/data/.bootstrap.lock";
# env: CHANGESET_MONITORING_INTERVAL: The number of minutes to wait before checking if there're new pending scripts.
defineEnvVar CHANGESET_MONITORING_INTERVAL MANDATORY "The number of minutes to wait before checking if there're new pending scripts." ${CHANGESET_MONITORING_INTERVAL};
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
