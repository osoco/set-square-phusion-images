# v rabbitmq
RUN wget -O- https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | sudo apt-key add - \
 && echo "deb https://packages.erlang-solutions.com/ubuntu bionic contrib" | sudo tee /etc/apt/sources.list.d/rabbitmq.list \
 && curl -fsSL https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc | sudo apt-key add - \
 && echo "deb https://dl.bintray.com/rabbitmq-erlang/debian bionic erlang" > /etc/apt/sources.list.d/bintray.rabbitmq.list \
 && echo "deb https://dl.bintray.com/rabbitmq/debian bionic main" >> /etc/apt/sources.list.d/bintray.rabbitmq.list \
 && ${PKG_INSTALL} rabbitmq-server socat logrotate jq rsync \
 && ${SYSTEM_CLEANUP} \
 && rabbitmq-plugins enable --offline rabbitmq_management \
 && for p in ${RABBITMQ_PLUGINS}; do \
      rabbitmq-plugins enable rabbitmq_${p} --offline; \
    done \
 && mkdir -p /backup/rabbitmq/storage/mnesia /data ${SERVICE_USER_HOME}/data ${SERVICE_USER_HOME}/backup/rabbitmq/storage/mnesia \
 && mv /var/lib/rabbitmq/mnesia /backup/rabbitmq/storage/ \
 && ln -s /backup/rabbitmq/storage/mnesia /var/lib/rabbitmq/mnesia \
 && ln -s /backup/rabbitmq/storage/mnesia /data/mnesia \
 && mv /var/log/rabbitmq /data/log \
 && ln -s /data/log /var/log/rabbitmq \
 && chown -R ${SERVICE_USER}:${SERVICE_GROUP} /data \
 && echo '[{rabbit, [{' >> /etc/rabbitmq/rabbitmq.config \
 && echo '    loopback_users, []' >> /etc/rabbitmq/rabbitmq.config \
 && echo '  }]}].' >> /etc/rabbitmq/rabbitmq.config \
 && echo '  ${SERVICE_USER}  -   nofiles ${RABBITMQ_ULIMIT_N}' >> /etc/security/limits.conf \
 && ln -s /usr/local/sbin/pending_scripts.sh /usr/local/sbin/pending_rabbitmq_scripts.sh

#RUN wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb && \
#    sudo dpkg -i erlang-solutions_1.0_all.deb && \
#    ${SYSTEM_UPDATE} && \
#    ${PKG_INSTALL} --force-yes rabbitmq-server && \
#    ${SYSTEM_CLEANUP}

COPY rabbitmq-files/check_admin_password.sh /etc/my_init.d/00_check_admin_password.sh
COPY rabbitmq-files/check_monitoring_password.sh /etc/my_init.d/00_check_monitoring_password.sh
COPY rabbitmq-files/bootstrap.sh /usr/local/bin/${IMAGE}-bootstrap.sh
COPY rabbitmq-files/create_bootstrap_cron.sh /etc/my_init.d/56_create_bootstrap_cron.sh
COPY rabbitmq-files/rabbitmq.config /etc/rabbitmq/

RUN chmod +x /etc/my_init.d/00_check_admin_password.sh \
             /etc/my_init.d/00_check_monitoring_password.sh \
             /usr/local/bin/${IMAGE}-bootstrap.sh \
             /usr/local/sbin/pending_scripts.sh \
             /usr/local/sbin/pending_rabbitmq_scripts.sh

# Define those mount points in child images
# VOLUME ["/backup/rabbitmq/storage/mnesia", "/backup/rabbitmq/changesets"]

# wget -qO - https://www.rabbitmq.com/rabbitmq-signing-key-public.asc | apt-key add - && \
#    echo "deb http://www.rabbitmq.com/debian/ testing main" > /etc/apt/sources.list.d/rabbitmq.list && \
#    ${SYSTEM_UPDATE} && \
#    ${PKG_INSTALL} --update --force-yes rabbitmq-server && \
#    ${SYSTEM_CLEANUP}

# Expose ports.
EXPOSE 5672 15672 5671 5672 5671 4369 25672 1883 8883 61613 61614
# ^ rabbitmq
